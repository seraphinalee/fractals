f0 = @(x) 1/2*(x-[0.5,tan(60)*0.5]) + [0.5,tan(60)*0.5];
f1 = @(x) 1/2*(x-[1,0]) + [1,0];
f2 = @(x) 1/2*(x-[0,0]) ;

m = 1;

tris = [2
    3
    0
    0.5
    1
    0
    tan(60)*0.5
    0];
    
for i = 1:m
    newtris = zeros(8,3^(i));
    for j=1:length(tris)
        tri = tris(j)
        a0 = f0([tri(3),tri(6)]);
        a1 = f1([tri(3),tri(6)]);
        a2 = f2([tri(3),tri(6)]);
        b0 = f0([tri(4),tri(7)]);
        b1 = f1([tri(4),tri(7)]);
        b2 = f2([tri(4),tri(7)]);
        c0 = f0([tri(5),tri(8)]);
        c1 = f1([tri(5),tri(8)]);
        c2 = f2([tri(5),tri(8)]);
        newtris(:,j) = [2
                        3
                        a0(1)
                        b0
        
    
    end
    tris = newtris;
end
    

model = createpde();
gd = [core];
ns = char('core');
ns = ns';
sf = 'core';
[dl,bt] = decsg(gd,sf,ns);
geometryFromEdges(model,dl);
%pdegplot(model,'EdgeLabels','on');
ylim([-1.5,1.5]);
axis equal;
applyBoundaryCondition(model,'dirichlet','Edge',[1,2,3],'u',0);
specifyCoefficients(model,'m',0,'d',1,'c',1,'a',0,'f',0);
r = [0,10000];
generateMesh(model,'Hmax',0.02);
results = solvepdeeig(model,r);
l = results.Eigenvalues;
u = results.Eigenvectors;
pdeplot(model,'XYData',u(:,15));